{"version":3,"sources":["serviceWorker.js","component/CardSearch.js","component/Card.js","component/CardList.js","robots.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CardSearch","searchchange","type","className","onChange","Card","name","email","id","src","alt","CardList","robots","map","sa","ss","key","username","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","user","this","filteredRobots","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","AppCss"],"mappings":"wJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCPSC,EATI,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACpB,OACC,6BACC,2BAAOC,KAAO,OAAOC,UAAU,eAAeC,SAAUH,MCU5CI,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OAEC,yBAAKL,UAAU,wBACd,yBAAKA,UAAW,sBAChB,yBAAKM,IAAG,+BAA0BD,EAA1B,gBAA4CL,UAAU,OAAOO,IAAI,MACzE,wBAAIP,UAAU,QAAd,IAAuBG,EAAvB,KACA,+BAAKC,EAAL,QCeYI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACC,yBAAKT,UAAU,OAGlBS,EAAOC,KAAI,SAACC,EAAIC,GACb,OAAQ,kBAAC,EAAD,CACPC,IAAOJ,EAAOG,GAAIP,GAClBA,GAAMI,EAAOG,GAAIP,GAChBF,KAAMM,EAAOG,GAAIT,KACjBC,MAAQK,EAAOG,GAAIR,aChBXK,EAAS,CACpB,CACEJ,GAAI,EACJF,KAAM,gBACNW,SAAU,OACVV,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNW,SAAU,YACVV,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNW,SAAU,WACVV,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNW,SAAU,WACVV,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNW,SAAU,SACVV,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNW,SAAU,mBACVV,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNW,SAAU,eACVV,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNW,SAAU,gBACVV,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNW,SAAU,WACVV,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNW,SAAU,iBACVV,MAAO,2BCPIW,E,YA7Cd,aAAc,IAAD,8BACZ,+CAgBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhBzC,EAAKC,MAAQ,CACZb,OAAQ,GACRU,YAAc,IAJH,E,iFAOM,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKT,SAAS,CAACT,OAAQA,S,+BAUf,IAAD,EACuBmB,KAAKN,MAA5Bb,EADA,EACAA,OAAQU,EADR,EACQA,YACTU,EAAiBpB,EAAOqB,QAAQ,SAAArB,GACrC,OAAOA,EAAON,KAAK4B,cAAcC,SAASb,EAAYY,kBAGvD,OAAQtB,EAAOwB,OAKd,6BACA,4CACC,kBAAC,EAAD,CAAYnC,aAAc8B,KAAKZ,iBAChC,kBAAC,EAAD,CAAUP,OAAUoB,KANvB,mD,GA/BkBK,aCAlBC,IAASC,OACP,yBAAKpC,UAAU,aACd,kBAAC,EAAD,OAIFqC,SAASC,eAAe,SNuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,gBMnHJC,YAAf,G","file":"static/js/main.0b3718e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst CardSearch = ({searchchange}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input type = \"text\" className=\"form-control\" onChange={searchchange} />\r\n\t\t</div>\r\n\r\n\t\t)\r\n\r\n}\r\nexport default CardSearch;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn(\r\n\r\n\t\t<div className=\"col-md-4 text-center\">\r\n\t\t\t<div className= \"card bg-light my-3\">\r\n\t\t\t<img src={`https://robohash.org/${id}.png?200*200`} className=\"mb-2\" alt=\"d\" />\r\n\t\t\t<h6 className=\"mb-0\"> {name} </h6>\r\n\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\t\treturn(\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t{\r\n\r\nrobots.map((sa, ss) => {\r\n\t\t\treturn (<Card \r\n\t\t\t\tkey = {robots[ss].id}\r\n\t\t\t id = {robots[ss].id}\r\n\t\t\t  name={robots[ss].name} \r\n\t\t\t  email ={robots[ss].email} />)\r\n\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\r\n\t\t\t)\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React, { Component } from 'react';\r\nimport CardSearch from '../component/CardSearch';\r\nimport CardList from '../component/CardList';\r\nimport {robots} from '../robots';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield : ''\r\n\t\t}\r\n\t}\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n\t\treturn response.json();\r\n\t})\r\n\t.then(user => {\r\n\t\tthis.setState({robots: robots});\r\n\t})\r\n\t\t\r\n\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter( robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t\r\n\t\t})\r\n\t\treturn !robots.length ?\r\n\t\t\r\n<h1> No data Found </h1> :\r\n\t\t\t\t\r\n\t\t (\r\n\t\t\t<div>\r\n\t\t\t<h1> RoboFriend </h1>\r\n\t\t\t\t<CardSearch searchchange={this.onSearchChange}/>\r\n\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t\r\n\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppCss from './containers/App.css'\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nReactDOM.render(\n\t\t<div className=\"container\">\n\t\t\t<App />\n\n\n\t\t</div>,\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nexport default AppCss;\n"],"sourceRoot":""}